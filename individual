#!/usr/bin/env bash

safe_mv() {
    [ "$1" = "$2" ] || mv "$1" "$2"
}

update() {
    source="$1"
    target="$2"

    rsync -avzhp "$source" "$target"
    corename="$(basename $target | cut -d- -f1)"
    dname="$(dirname $target)"
    safe_mv $(realpath "$target") "$dname"/"$corename-$(date -I)"
}

# note to self: never initialise directory to have a trailing slash,
# better just add manually to the end if necessary
mount_point=/media/$USER/wd_black
dest_dir=individual
full_path="$mount_point"/"$dest_dir"
videos_dir="$(xdg-user-dir VIDEOS)"
pictures_dir="$(xdg-user-dir PICTURES)"
music_dir="$(xdg-user-dir MUSIC)"

update $HOME/University/ "$full_path"/University-????-??-??/
# TODO: add options to copy only specified directories inside media?
update "$videos_dir/" "$full_path"/Media-????-??-??/Videos-????-??-??/
update "$pictures_dir/" "$full_path"/Media-????-??-??/Pictures-????-??-??/
update "$music_dir/" "$full_path"/Media-????-??-??/Music-????-??-??/
safe_mv "$full_path"/Media-????-??-?? "$full_path"/Media-$(date -I)
update $HOME/Projects/vm/ "$full_path"/Virtual_Machines-????-??-??/
update $HOME/Projects/img/ "$full_path"/OS_Images-????-??-??/

# better yet create array of pairs and loop over it but arrays are
# bash specific, definitely not portable, so I will not do that for
# now and consider the alternatives first
